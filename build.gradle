plugins {
    id 'com.google.protobuf' version '0.8.8'
    id 'io.spring.dependency-management' version '1.0.1.RELEASE'
    id 'java'
}

group 'dev.buzenets'
version '1.0'

sourceCompatibility = 1.8
sourceSets {
    main {
        java.srcDirs += 'src/main/grpc'
    }
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}
repositories {
    mavenCentral()
}
def grpcVersion = "1.22.1"
dependencyManagement {
    imports {
        mavenBom 'org.apache.logging.log4j:log4j-bom:2.12.0'
    }
}
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    runtime group: 'io.grpc', name: 'grpc-netty-shaded', version: '1.22.1'

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    compile 'com.beust:jcommander:1.72'

    jmhImplementation 'org.openjdk.jmh:jmh-core:1.21'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.21'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-commons:1.4.1'
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:3.7.1" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
    generatedFilesBaseDir = "$projectDir/src"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'dev.buzenets.walletclient.ClientApplication'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'org.openjdk.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)